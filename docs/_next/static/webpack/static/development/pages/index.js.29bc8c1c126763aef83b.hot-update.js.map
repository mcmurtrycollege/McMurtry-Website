{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.29bc8c1c126763aef83b.hot-update.js","sources":["webpack:///./components/navbar/navbar.js"],"sourcesContent":["import React from 'react';\r\nimport Link from 'next/link';\r\nimport './navbar.css';\r\nimport McmLogo from '../mcmLogo';\r\nimport navbar_items from './navbar_content';\r\n\r\nconst DropDownWide = props => {\r\n    const h = props.expanded ? (500) : (0)\r\n    const dropDownHeightStyle = {\r\n        maxHeight: `${h}px`,\r\n    }\r\n    return (\r\n        <div className='dropdown-item' onMouseEnter={props.handleMouseEnter} onMouseLeave={props.handleMouseLeave} style={{ width: '10%' }}>\r\n            <div>\r\n                {\r\n                    props.headerTo !== undefined ? (\r\n                        <Link href={props.headerTo}>\r\n                            <div className={props.expanded ? ('dropdown-header-active') : ('dropdown-header-inactive')}>\r\n                                {props.header}\r\n                            </div>\r\n                        </Link>\r\n                    ) : (\r\n                            <div className={props.expanded ? ('dropdown-header-active') : ('dropdown-header-inactive')}>\r\n                                {props.header}\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n            <div className='dropdown-subheaders' style={dropDownHeightStyle}>\r\n                {\r\n                    props.dropDownChildren.map(({ subheader, to, href }) => (\r\n                        href === undefined ? (\r\n                            <Link href={to} key={`${subheader}`}>\r\n                                <div className='dropdown-subheader'>\r\n                                    {subheader}\r\n                                </div>\r\n                            </Link>\r\n                        ) : (\r\n                                <a href={href} key={`${subheader}`} style={{ textDecoration: 'none' }} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    <div className='dropdown-subheader'>\r\n                                        {subheader}\r\n                                    </div>\r\n                                </a>\r\n                            )\r\n\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst DropDownNarrow = props => {\r\n    const h = props.expanded ? (500) : (0)\r\n\r\n    const dropDownHeightStyle = {\r\n        maxHeight: `${h}px`,\r\n    }\r\n    return (\r\n        <div className='dropdown-item'>\r\n            <div>\r\n                {\r\n                    props.headerTo !== undefined ? (\r\n                        <Link href={props.headerTo}>\r\n                            <div className='dropdown-header' onClick={props.handleClick}>\r\n                                {props.header}\r\n                            </div>\r\n                        </Link>\r\n                    ) : (\r\n                            <div className='dropdown-header' onClick={props.handleClick}>\r\n                                {props.header}\r\n                                {'      '}\r\n                                <img className='arrow' style={props.expanded ? ({ transform: 'rotate(90deg)' }) : ({})} src={`https://icon.now.sh/chevron/2B2F3A/10`} alt=\">\" />\r\n                            </div>\r\n                        )\r\n                }\r\n            </div>\r\n            <div className='dropdown-subheaders' style={dropDownHeightStyle}>\r\n                {\r\n                    props.dropDownChildren.map(({ subheader, to, href }) => (\r\n                        href === undefined ? (\r\n                            <Link href={to} key={`${subheader}`}>\r\n                                <div className='dropdown-subheader'>\r\n                                    {subheader}\r\n                                </div>\r\n                            </Link>\r\n                        ) : (\r\n                                <a href={href} key={`${subheader}`} style={{ textDecoration: 'none' }} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    <div className='dropdown-subheader'>\r\n                                        {subheader}\r\n                                    </div>\r\n                                </a>\r\n                            )\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass NavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        let headerStates = []\r\n        for (let i = 0; i < props.dropDownItems.length; i++) {\r\n            headerStates.push(false)\r\n        }\r\n        this.state = {\r\n            closed: true,\r\n            fixedNavbar: false,\r\n            headerStates: headerStates\r\n        }\r\n        this.showSubheader = this.showSubheader.bind(this)\r\n        this.hideSubheader = this.hideSubheader.bind(this)\r\n        this.toggleSubheader = this.toggleSubheader.bind(this)\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.scrollHandler = this.scrollHandler.bind(this);\r\n    }\r\n\r\n    showSubheader(indx) {\r\n        let current = this.state.headerStates\r\n        current[indx] = true\r\n        this.setState({ headerStates: current })\r\n    }\r\n\r\n    hideSubheader(indx) {\r\n        let current = this.state.headerStates\r\n        current[indx] = false\r\n        this.setState({ headerStates: current })\r\n    }\r\n\r\n    toggleSubheader(indx) {\r\n        let current = this.state.headerStates\r\n        current[indx] = !this.state.headerStates[indx]\r\n        this.setState({ headerStates: current })\r\n    }\r\n\r\n    toggleNavbar() {\r\n        this.setState({\r\n            closed: !this.state.closed\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.scrollHandler)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.scrollHandler)\r\n    }\r\n\r\n    scrollHandler() {\r\n        if (window.scrollY > document.getElementById('mcm-header').clientHeight) {\r\n            this.setState({ fixedNavbar: true })\r\n        } else {\r\n            this.setState({ fixedNavbar: false })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let narrowNavBarStyle = {};\r\n        let burgerStyle = { transition: 'transform 0.2s ease-in-out' };\r\n        if (this.state.closed) {\r\n            narrowNavBarStyle.maxHeight = '0px'\r\n        } else {\r\n            narrowNavBarStyle.maxHeight = '1000px'\r\n            burgerStyle.transform = 'rotate(90deg)'\r\n        }\r\n\r\n        let fixedNavbar = {}\r\n        if (this.state.fixedNavbar) {\r\n            fixedNavbar.position = 'fixed'\r\n            fixedNavbar.marginTop = `-${document.getElementById('mcm-header').clientHeight + 0}px`\r\n        }\r\n\r\n        let wideNavbar = []\r\n        let narrowNavbar = []\r\n\r\n        for (let k = 0; k < this.props.dropDownItems.length; k++) {\r\n            let item = this.props.dropDownItems[k]\r\n            wideNavbar.push(\r\n                <DropDownWide handleMouseEnter={() => this.showSubheader(k)} handleMouseLeave={() => this.hideSubheader(k)}\r\n                    expanded={this.state.headerStates[k]} header={item.header} headerTo={item.headerTo} dropDownChildren={item.dropDownChildren}\r\n                    key={`${item.header}`} />\r\n            )\r\n            narrowNavbar.push(\r\n                <DropDownNarrow handleClick={() => this.toggleSubheader(k)} expanded={this.state.headerStates[k]}\r\n                    header={item.header} headerTo={item.headerTo} dropDownChildren={item.dropDownChildren} key={`${item.header}`} />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className='navbar-crest'>\r\n                    <McmLogo />\r\n                </div>\r\n                <div className='wide-navbar' style={fixedNavbar}>\r\n                    <div className='filler-box' />\r\n                    {wideNavbar}\r\n                    <div className='filler-box' />\r\n                </div>\r\n                <div className='narrow-navbar'>\r\n                    <div className='narrow-navbar-toggle' >\r\n                        <img style={burgerStyle} onClick={this.toggleNavbar} src='https://icon.now.sh/burger/2B2F3A/24' alt='burger' />\r\n                    </div>\r\n                    <McmLogo />\r\n                    <div className='narrow-navbar-menu' style={narrowNavBarStyle}>\r\n                        {narrowNavbar}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Navbar = () => (\r\n    <div>\r\n        <NavBar dropDownItems={navbar_items} />\r\n    </div>\r\n)\r\n\r\nexport default Navbar;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAomBA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3BA;AACA;AAkBA;AAAA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAhHA;AACA;AAkHA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAKA;;;;A","sourceRoot":""}